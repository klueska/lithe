Lithe Callback API:

/* Lithe scheduler callbacks/entrypoints. */
typedef struct lithe_sched_funcs {

  /* Function ultimately responsible for granting hart requests from a child
   * scheduler. This function is automatically called when a child invokes
   * lithe_hart_request() from within it's current scheduler. Returns 0 on
   * success, -1 on failure. */
  hart_request(child, k);
  (formerly request() in old lithe API)

  /* Entry point for harts granted to this scheduler from a parent by a call
   * to lithe_hart_request(). */
  hart_enter();
  (formerly enter() in old lithe API)

  /* Entry point for harts given back to this scheduler by a call to
   * lithe_hart_yield() from a child. */
  hart_return(child);
  (formerly yield() in old lithe API)

  /* Callback to inform that a child scheduler has entered on one of the
   * current scheduler's harts */
  child_enter(child);
  (formerly reg() in old lithe API)

  /* Callback to inform that a child scheduler has exited on one of the
   * current scheduler's harts */
  child_exit(child);
  (formerly unreg() in old lithe API)

  /* Callback letting this scheduler know that the provided context has been
   * blocked by some external component.  It will inform the scheduler when it
   * unblocks it via a call to lithe_context_unblock() which ultimately
   * triggers the context_unblock() callback. */
  context_block(context);
  (no equivalent in old lithe API)

  /* Callback letting this scheduler know that the provided context has been
   * unblocked by some external component and is now resumable. */
  context_unblock(context);
  (also called unblock() in old lithe API)

  /* Callback notifying a scheduler that a context has cooperatively yielded
   * itself back to the scheduler. */
  context_yield(context);
  (no equivalent in old lithe API)

  /* Callback notifying a scheduler that a context has run past the end of it's
   * start function and completed it's work.  At this point it should either be
   * reinitialized via a call to lithe_context_reinit() or cleaned up via
   * lithe_context_cleanup(). */
  context_exit(context);
  (no equivalent in old lithe API)

} lithe_sched_funcs_t;

